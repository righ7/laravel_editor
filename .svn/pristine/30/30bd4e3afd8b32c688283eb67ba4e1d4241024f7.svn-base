<script>
    // 商品展示组件
    let goodsShow = {
        props: ['shop_type'],
        template:`
            <div style="margin: 2px;">
                <a id="top"></a>
                <Row style="margin-left: 2px;">
                <Col>
                    <Row>
                        <i-col class="search-position">
                            三级分类『可搜索、可单选』：<br/>
                            <Cascader :data="categories" v-model="search.category_third_id" @on-change="categoriesChange" filterable change-on-select style="width: 200px;"></Cascader>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                商品名称：<br/>
                                <i-input v-model="search.goods_name" clearable style="width: 150px;"></i-input>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                商品ID / 链接：<br/>
                                <i-input v-model="search.goods_id" clearable style="width: 150px;"></i-input>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                店铺名称：<br/>
                                <i-input v-model="search.shop_name" clearable style="width: 120px;"></i-input>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                店铺ID / 链接：<br/>
                                <i-input v-model="search.shop_id" clearable style="width: 120px;"></i-input>
                            </div>
                        </i-col>
                        <i-col class="search-position" style="clear: both">
                            <div>
                                是否推荐商品：<br/>
                                <i-switch v-model="search.is_recommend" size="large" true-value="1" false-value="3">
                                    <span slot="close">全部</span>
                                    <span slot="open">是</span >
                                </i-switch>
                            </div>
                        </i-col>
                        <i-col class="search-position" :style="{ display: goods_restrict == 1 ? 'none' : 'block'}">
                            <div style="height: 50px;color:#FF0000;font-weight: bold">
                                是否自有：<br/>
                                <i-switch v-model="search.shop_our_status">
                                    <Icon type="md-checkmark" slot="open"></Icon>
                                    <Icon type="md-close" slot="close"></Icon>
                                </i-switch>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                佣金比例「%」：<br/>
                                <InputNumber :max="100" :min="0" :step="1" v-model="search.commission_rate_start" style="width: 45px;"></InputNumber>
                                -
                                <InputNumber :max="100" :min="0" :step="1" v-model="search.commission_rate_end" style="width: 45px;"></InputNumber>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                价格范围：<br/>
                                <InputNumber :step="1" v-model="search.price_start" style="width: 50px;"></InputNumber>
                                -
                                <InputNumber :step="1" v-model="search.price_end" style="width: 50px;"></InputNumber>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                新品时间：<br/>
                                <radio-group @on-change="createTimeChange" v-model="search.create_time" type="button">
                                    <Radio label="全部"></Radio>
                                    <Radio label="3天内"></Radio>
                                    <Radio label="7天内"></Radio>
                                    <Radio label="15天内"></Radio>
                                    <Radio label="30天内"></Radio>
                                </radio-group>
                            </div>
                        </i-col>
                        <i-col class="search-position">
                            <div>
                                <br/>
                                <i-button type="primary" @click="getGoodsData">搜索</i-button>
                                <i-button @click="reset(3)">重置</i-button>
                            </div>
                        </i-col>
                    </Row>
                </Col>
                <Col span="22" style="margin: 4px 0 5px 0">
                    <Row style="margin-left: 2px;">
                        <i-col span="22" style="margin: 4px 0 5px 0">
                            <ButtonGroup>
                                <Button @click="orderChange(index, item)" v-for="(item,index) in order.orderArray" :key="item.id" :type="item.action == true ? 'primary':'default'">
                                    @{{ item.text }}<Icon style="font-size: 15px;" :type="item.order == 'desc' ? order.orderIcon.down:order.orderIcon.up"/>
                                </Button>
                            </ButtonGroup>
                        </i-col>
                    </Row>
                </Col>
                <Col span="24" style="margin-top: 4px;">
                    <div style="margin-top: 4px;" v-if="shop_type != 2">小店：
                        <a class="shop-search-config" @click="shopSearchConfig(xd.shop_id)" v-for="xd in searchShopConfig['xd']" v-if="xd.is_our == 1" >
                            @{{ xd.shop_name }} (@{{ xd.category}} - @{{ xd.count}})
                        </a>
                        <a class="shop-search-config" :style="{ display: shopSearchConfigShow }" @click="shopSearchConfig(xd.shop_id)" v-for="xd in searchShopConfig['xd']" v-if="xd.is_our == 0" >
                            @{{ xd.shop_name }}  (@{{ xd.category}} - @{{ xd.count}})
                        </a>
                        <Icon style="font-size:15px;cursor: pointer;" @click="showall" :type="shopSearchConfigShowIcon" />
                    </div>
                    <div style="margin-top: 4px;" v-if="shop_type != 1">放心购：
                        <a class="shop-search-config" @click="shopSearchConfig(xd.shop_id)" v-for="xd in searchShopConfig['fxg']" v-if="xd.is_our == 1">
                            @{{ xd.shop_name }}  (@{{ xd.category}} - @{{ xd.count}})</a>
                        <a class="shop-search-config" :style="{ display: shopSearchConfigShow }" @click="shopSearchConfig(xd.shop_id)" v-for="xd in searchShopConfig['fxg']" v-if="xd.is_our == 0">
                            @{{ xd.shop_name }}  (@{{ xd.category}} - @{{ xd.count}})</a>
                        <Icon style="font-size:15px;cursor: pointer;" @click="showall" :type="shopSearchConfigShowIcon" />
                    </div>
                </Col>
                <Col span="22" style="margin-top: 4px;">
                    <div v-for="(tag,index) in tags" v-if="tag.parent_id==0&&index<5" style="min-width: 15px;display: inline-block;margin-right: 15px">
                        <i-select v-model="a.modal[index]" clearable style="width:150px" :placeholder="tag.tag_name" @on-change="tagSeleChange($event,tag.id)">
                            <i-option v-for="(tag2,index) in tags" v-if="tag2.parent_id==tag.id" :value="tag2.id" :key="tag2.id">@{{ tag2.tag_name }}</i-option>
                        </i-select>
                    </div>
                    <div v-if="displaymore=='none'" style="display: inline-block"><Button @click="displaymore='inline-block'"><Icon type="ios-arrow-down" /></Button></div>
                    <div v-else style="display: inline-block"><Button @click="displaymore='none'"><Icon type="ios-arrow-up" /></Button></div>
                    <i-button type="primary" @click="getGoodsData" style="margin-left: 15px">搜索</i-button>
                    <i-button @click="resetTag(1)" style="margin-left: 15px">重置</i-button>
                    <div style="margin-top: 10px">
                        <div :style="{display:displaymore}" v-for="(tag,index) in tags" v-if="tag.parent_id==0&&index>=5" style="min-width: 15px;display: inline-block;margin-right: 15px">
                            <i-select v-model="a.modal[index]" style="width:150px" clearable :placeholder="tag.tag_name" @on-change="tagSeleChange($event,tag.id)">
                                <i-option v-for="(tag2,index) in tags" v-if="tag2.parent_id==tag.id" :value="tag2.id" :key="tag2.id">@{{ tag2.tag_name }}</i-option>
                            </i-select>
                        </div>
                    </div>
                </Col>
            </Row>
                <Row type="flex" justify="center">
                    <Col v-if="goodsData.length < 1"><div style="height: 400px; font-size: 30px;line-height: 400px;">暂无商品</div></Col>
                    <Col :class="[ goods.status === true ? 'goods-select':'' ]" :key="goods.id" class="card" :xs="10" :sm="8" :md="6" :lg="4" v-for="(goods, index) in goodsData">
                        <div @click="goodsActive(index)">
                            <div class="card-content" style="width: 165px;margin: 10px auto;">
                                <div style="position: relative;">
                                    <img @click="addtag(goods,index)" src="{{ asset('images/wujiao.png') }}" :style="{ display: tagsSetShow }" style="cursor: pointer;z-index:99;width: 20px;height: 20px;position:absolute;top:0px;right:23px;"></img>

                                    <div v-if="goods.is_recommend == 1" class="card-recommend">推荐</div>
                                    <img width="165" height="165" :src="goods.image">
                                    <div>
                                        <div v-if="goods.tags_id" style="width: 100%">
                                            <div v-for="goodTag in goods.tags_id">
                                                <div v-for="(tag,index) in tags" v-if="goodTag==tag.id && index!=1" style="display: inline-block;float: left">
                                                    <span style="cursor: pointer;background: #f6ffed;border-radius: 3px;padding: 2px 3px;border: 1px solid #52c41a;color:#52c41a;margin-right: 5px" @click="selectTag(tag.id)">@{{tag.tag_name}}</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-url" style="width: 100%;"><a :href="goods.goods_url" target="_blank">@{{ goods.title }}</a></div>
                                        <div>
                                            <span style="color: red; font-size: 16px;">￥@{{ goods.price }}</span>
                                            <span style="color: red;">佣金</span> <span style="color:red; font-size:15px;">@{{ commission_earnings(goods.commission_rate, goods.price) }} (@{{ commission_rate(goods.commission_rate)}})</span>
                                        </div>
                                        <div>
                                            销量：@{{ goods.sell_num }}
                                            <span style="margin-left: 6px;">热度：@{{ goods.goods_heat }}</span>
                                        </div>
                                        <div>
                                            <a :href="['https://haohuo.snssdk.com/views/shop/index?id='+goods.shop_id]" target="_blank">@{{ goods.shop_name }}</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <Col :span="24">
                            <div @click="findGoodsSame(goods)" class="goods-same" style="cursor: pointer; display:none; position:absolute; bottom: 0; right:0; background-color: #ff4517; height: 30px; text-align: center; line-height: 30px; width: 33%">
                                <span style="color: white; font-size: 18px;">找同款</span>
                            </div>
                        </Col>
                    </Col>
                </Row><br/>
                <Row type="flex" justify="center">
                    <Col>
                        <Page :total="page.total" :current="page.current" :page-size="page.pageSize" @on-change="pageCurrentChange" show-elevator show-total/>
                    </Col>
                </Row>
                <modal
                        title="添加标签"
                        v-model="tagmodal"
                        ok-text="提交"
                        @on-ok="addGoodsTag"
                        width="300"
                        class-name="vertical-center-modal">
                    <Row v-for="(tags,index) in addGTag" :key="index" v-if="tags.parent_id==0">
                        <Row><Tag color="success">@{{tags.tag_name}}</Tag></Row>
                        <checkbox-group v-model="checkedArr">
                            <Checkbox :label="tags2.id"  v-for="(tags2, index) in addGTag" :key="index" v-if="tags2.parent_id==tags.id">@{{tags2.tag_name}}</Checkbox>
                        </checkbox-group>
                    </Row>
                </modal>
                <Modal v-model="findGoodsSameModal">
                    <div>
                        商品名：@{{ findGoodsSameGoodsData.title }}
                        <br/><br/>
                        请选择如何查找<br/>
                        <Button @click='findGoodsSameSearch(1)'>分类 @{{ findGoodsSameAmount.c }}</Button>
                        <Button @click='findGoodsSameSearch(2)'>标题 @{{ findGoodsSameAmount.t }}</Button>
                        <Button @click='findGoodsSameSearch(3)'>分组 @{{ findGoodsSameAmount.g.length }}</Button>
                    </div>
                </Modal>
            </div>
        `,
        data() {
            return {
                order: { // 排序
                    orderIcon: {
                        up: 'md-arrow-round-up',
                        down: 'md-arrow-round-down'
                    },
                    orderArray: [ // 排序数组对象
                        {id:1, text: '随机', column:'random', order: 'desc', action: false},
                        {id:2, text: '热度', column:'hotrank', order: 'desc', action: true},
                        {id:3, text: '佣金比例', column:'cos_ratio', order: 'desc', action: false},
                        {id:4, text: '新品', column:'created_at', order: 'desc', action: false},
                        {id:5, text: '价格', column:'discount_price', order: 'desc', action: false},
                        {id:6, text: '销量', column:'all_sell_num', order: 'desc', action: false}
                    ],
                },
                search:{ // 搜索
                    category_third_id: ['[48]'],
                    commission_rate_start: 0,
                    commission_rate_end: 100,
                    price_start: 0,
                    price_end: 999999,
                    is_recommend: '3',
                    goods_id: '',
                    goods_name: '',
                    shop_id: '',
                    shop_name: '',
                    shop_type: this.shop_type,
                    shop_our: [], //自有店铺
                    shop_our_status: true,
                    create_time: '全部',
                    order: 'hotrank desc',
                },
                goods_restrict: 0, // 是否自有商品
                goodsData: [], // 商品数据,
                page: {
                    total:0,
                    current: 1,
                    pageSize: 78
                },
                drawer: false,
                findGoodsSameModal: false, // 找同款 modal
                findGoodsSameGoodsData: {}, // 找同款商品临时数据
                findGoodsSameAmount: {  // 找同款对应商品数量
                    c: 0,
                    c_id: [],
                    t: 0,
                    g: []
                },
                shopSearchConfigShowIcon: 'md-add-circle',
                shopSearchConfigShow: 'none',
                //标签
                tags: [],
                displaymore:'none',
                a:{
                    modal:[]
                },
                selectTagArr:[],
                tagmodal:false,
                checkedArr:[],
                tagSeleGood:'',
                markindex:'',
                tagsSetShow:false,
                addGTag:'',
            }
        },
        created() {
            let that = this;
            bus.$on('syncGoodsSelectStyle', () => {
                that.syncGoodsSelectStyle()
            });
            bus.$on('getGoodsData', () => { // 获取商品
                switch(Number(that.shop_type)){
                    case 1:
                        this.searchShopConfig['xd'].map( item =>{
                            if(item.is_our === 1){
                                this.search.shop_our.push(item.shop_id);
                            }
                        });
                        break;
                    case 0:
                        this.searchShopConfig['fxg'].map( item =>{
                            if(item.is_our === 1){
                                this.search.shop_our.push(item.shop_id);
                            }
                        });
                        break;
                    case 3:
                        this.searchShopConfig['xd'].map(item => {
                            if (item.is_our === 1) {
                                this.search.shop_our.push(item.shop_id);
                            }
                        });
                        this.searchShopConfig['fxg'].map(item => {
                            if (item.is_our === 1) {
                                this.search.shop_our.push(item.shop_id);
                            }
                        });
                        break;
                }
                that.getGoodsData();
            });
            // bus.$on('addGoodsTag', () => {
            //     that.addGoodsTag()
            // });
        },
        computed: {
            searchShopConfig() {
                return this.$store.state.temaiGoodsSearchConfig;
            },
            goodsSelect() {
                return this.$store.state.goodsSelect;
            },
            categories() {
                return this.$store.state.categories;
            }
        },
        methods: {
            getGoodsData(page = 1) { // 获取商品数据
                let that = this;

                let url = this.$store.state.commonUrlV1;
                let limit = this.$store.state.page.limit;
                axios.get(url, {
                    params: {
                        page: page,
                        limit: limit,
                        searchArr: that.search,
                        order: that.search.order,
                        selectTagArr: that.selectTagArr
                    }
                }).then(function (response) {
                    that.goodsData = response.data.data;
                    that.page.total = response.data.count;
                    that.tags = response.data.tags;
                    that.syncGoodsSelectStyle();
                    location.href = "#top";
                });
                axios.get("{{ route('goods_tag.get_goods_tags') }}", {
                    params: {}
                })
                    .then(function (response) {
                        if (response.data==true){
                            that.tagsSetShow='bolck';
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            createTimeChange(){ // 新品时间
                this.getGoodsData();
            },
            syncGoodsSelectStyle() { // 同步状态
                this.goodsData = this.$store.getters.syncGoodsSelectStyle(this.goodsData);
            },
            orderChange(index, item){ // 排序按钮，触发搜索
                let that = this;

                if(item.action === true){
                    if(item.order === 'desc'){
                        that.order.orderArray[index].order = 'asc';
                    }else{
                        that.order.orderArray[index].order = 'desc';
                    }
                }else {
                    that.order.orderArray.map(item=>{
                        item.order = 'desc';
                        item.action = false;
                    });
                    that.order.orderArray[index].action = true;
                }

                let orderArray = that.order.orderArray;
                for (let i = 0; i< orderArray.length; i++){
                    if(orderArray[i].action === true){
                        that.search.order = orderArray[i].column+' '+ orderArray[i].order;
                        break;
                    }
                }
                that.getGoodsData();
            },
            categoriesChange(value, selectedData) {
                if(value.length < 1) return false;
                let vv = value[value.length - 1];

                // 二级分类为空时，加载二级分类下所有三级分类的ID
                if(vv.length < 1){
                    if(selectedData.length >= 2){
                        for (let i = 0; i<this.categories.length; i++){
                            if(this.categories[i].label === selectedData[0].label){
                                for(let j = 0; j< this.categories[i].children.length; j++){
                                    if(this.categories[i].children[j].label === selectedData[1].label){
                                        this.categories[i].children[j].children.map(third => {
                                            third.value.map(va=>{
                                                vv.push(va);
                                            })
                                        });
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                this.search.category_third_id = [vv];
            },
            goodsActive(index) {
                let that = this;
                if(that.goodsData[index].status === true){
                    that.goodsData[index].status = false;
                    that.goodsSelect.map((obj, key)=>{
                        if(obj.id === that.goodsData[index].id){
                            that.$store.commit('delGoodsSelect',key);
                        }
                    });
                }else{
                    let is_exist = false; // 查找是否有同样记录
                    that.goodsSelect.map((obj, key)=>{
                        if(obj.id === that.goodsData[index].id){
                            is_exist = true;
                        }
                    });

                    if(is_exist) this.$Message.info('商品已经勾选');
                    if(!is_exist){
                        that.goodsData[index].status = true;
                        that.$store.commit('addGoodsSelect',this.goodsData[index]);
                    }
                }
            },
            pageCurrentChange(page_index) {
                this.getGoodsData(page_index);
            },
            findGoodsSame(goods){
                let that = this;
                this.findGoodsSameModal = true;
                this.findGoodsSameGoodsData = goods;
                let lastIndex = this.findGoodsSameGoodsData.title.lastIndexOf(' ');
                let goods_name = this.findGoodsSameGoodsData.title.slice(0,lastIndex);
                let goods_id = this.findGoodsSameGoodsData.goods_id;
                // 请求同分类 || 同名称 商品数量
                axios(this.$store.state.commonUrlGetGoodsAmount,{
                    params: {
                        goods_name: goods_name,
                        goods_id: goods_id,
                        c_id: that.search.category_third_id
                    }
                }).then(r => {
                    that.findGoodsSameAmount.c = r.data.c_amount;
                    that.findGoodsSameAmount.c_id = r.data.c_id;
                    that.findGoodsSameAmount.t = r.data.t_amount;
                });

                // 请求公共分组/自有分组下商品数量
                axios('{{ route('goods_group/find_goods_in_group') }}',{
                    params: {
                        goods_id: goods.goods_id
                    }
                }).then(r => {
                    that.findGoodsSameAmount.g = r.data;
                })
            },
            findGoodsSameSearch(index){
                let that = this;
                switch(index){
                    case 1: // 分类搜索
                        if(this.search.category_third_id.length < 1){
                            let tem = this.search.category_third_id;
                            this.search.category_third_id = this.findGoodsSameAmount.c_id;
                            this.getGoodsData();
                            setTimeout(()=>{
                                this.search.category_third_id = tem;
                            },666);
                        }else{
                            this.getGoodsData();
                        }
                        break;
                    case 2: // 标题搜索
                        let tem = this.search.goods_name;
                        let lastIndex = this.findGoodsSameGoodsData.title.lastIndexOf(' ');
                        this.search.goods_name = this.findGoodsSameGoodsData.title.slice(0,lastIndex);
                        this.getGoodsData();
                        setTimeout(()=> {
                            this.search.goods_name = tem;
                        },666);
                        break;
                    case 3: // 分组搜索
                        let url = that.$store.state.commonUrlV2;
                        that.$Spin.show();
                        axios.get(url, {
                            params: {
                                page: 1,
                                limit: 78,
                                goods_id_arr: this.findGoodsSameAmount.g
                            }
                        }).then(function (response) {
                            that.goodsData = response.data.data;
                            that.page.total = 78;
                        }).finally(()=>{
                            that.$Spin.hide();
                        });
                        break;
                }
                this.findGoodsSameModal = false;
            },
            shopSearchConfig(shop_id){
                this.search.shop_id = shop_id;
                this.search.category_third_id = '';
                this.getGoodsData();
            },
            showall(){
                if (this.shopSearchConfigShowIcon=='md-add-circle'){
                    this.shopSearchConfigShow = 'inline';
                    this.shopSearchConfigShowIcon='md-remove-circle';
                }else{
                    this.shopSearchConfigShow = 'none';
                    this.shopSearchConfigShowIcon='md-add-circle';
                }
            },
            // 下述两个方法用于解决 filter 获取不到 this
            commission_rate (value) {
                return this.$store.getters.commission_rate(value);
            },
            commission_earnings (value, price) {
                return this.$store.getters.commission_earnings(value, price);
            },
            //标签
            tagSeleChange(value,index){
                for (var i=0;i<this.tags.length;i++){
                    if (this.tags[i].parent_id==index){
                        for (var j=0;j<this.selectTagArr.length;j++){
                            if (this.selectTagArr[j]==this.tags[i].id){
                                this.selectTagArr.splice(j,1)
                                break;
                            }
                        }
                    }
                }
                if (value){
                    this.selectTagArr.push(value)
                }
            },
            resetTag(tab){
                this.a.modal=[];
            },
            selectTag(id,page=1){
                let sArr=[];
                sArr.push(id)
                let that = this;

                let url = this.$store.state.commonUrlV1;
                let limit = this.$store.state.page.limit;
                axios.get(url, {
                    params: {
                        page: page,
                        limit: limit,
                        searchArr: that.search,
                        order: that.search.order,
                        selectTagArr: sArr
                    }
                }).then(function (response) {
                    that.goodsData = response.data.data;
                    that.page.total = response.data.count;
                    that.tags = response.data.tags;
                    that.syncGoodsSelectStyle();
                });
            },
            addGoodsTag(){
                let that = this;
                let url  = this.$store.state.commonTagUpdate;
                axios.get(url, {
                    params: {
                        goods_id:that.tagSeleGood,
                        checkedArr:that.checkedArr
                    }
                })
                    .then(function (response) {
                        if (response.data.code==0){
                            that.$Message.success('更改成功！')
                            that.goodsData[that.markindex]['tags_id']=that.checkedArr
                        }else {
                            that.$Message.error('服务器开了点小差，请稍后再试！')
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            },
            addtag(goods,index){
                this.markindex=index;
                this.tagmodal=true;
                this.tagSeleGood=goods.goods_id;
                this.checkedArr = [];
                let that=this;
                //获取全部标签
                let url = this.$store.state.commonTagGet;
                axios.get(url, {
                    params: {
                        goods_id:that.tagSeleGood
                    }
                })
                    .then(function (response) {
                        that.addGTag = response.data.data;
                        that.checkedArr = response.data.goodsTags;
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
        },
    };
</script>